{
	"info": {
		"_postman_id": "7ffa5dd7-698a-487c-819e-7d7b3fc9f781",
		"name": "NuserySys",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32943262"
	},
	"item": [
		{
			"name": "TeacherRoute",
			"item": [
				{
					"name": "GetAllTeachers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Each object in the array has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (teacher) {",
									"        pm.expect(teacher.fullname).to.exist.and.to.be.a('string');",
									"        pm.expect(teacher.email).to.exist.and.to.be.a('string');",
									"        pm.expect(teacher.password).to.exist.and.to.be.a('string');",
									"        pm.expect(teacher.id).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the '__v' field is present in each object in the array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function (teacher) {",
									"        pm.expect(teacher.__v).to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}/teachers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTeacherById(param)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData._id).to.exist;",
									"  pm.expect(responseData.fullname).to.exist;",
									"  pm.expect(responseData.email).to.exist;",
									"  pm.expect(responseData.password).to.exist;",
									"  pm.expect(responseData.image).to.exist;",
									"  pm.expect(responseData.__v).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Image should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.image).to.exist.and.to.have.lengthOf.at.least(1, \"Image should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/teachers/9",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "addNewTeacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.response.to.have.status(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fullname",
									"value": "Ahmed",
									"type": "text"
								},
								{
									"key": "email",
									"value": "Ahmedl3swy@outlook.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": [
										"/C:/Users/XPRISTO/Pictures/Me.jpg",
										"/C:/Users/ahmed/Pictures/Screenshots/Screenshot (227).png"
									]
								},
								{
									"key": "isSupervisor",
									"value": "true",
									"type": "text",
									"disabled": true
								},
								{
									"key": "_id",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{URL}}/teachers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateTeacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('acknowledged');",
									"    pm.expect(responseData).to.have.property('modifiedCount');",
									"    pm.expect(responseData).to.have.property('upsertedId');",
									"    pm.expect(responseData).to.have.property('upsertedCount');",
									"    pm.expect(responseData).to.have.property('matchedCount');",
									"});",
									"",
									"",
									"pm.test(\"Value of acknowledged is boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.acknowledged).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Modified Count should be an integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.modifiedCount).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Upserted Id should be an integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.upsertedId).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Upserted Count should be an integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.upsertedCount).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "9",
									"type": "text"
								},
								{
									"key": "fullname",
									"value": "Ahmed",
									"type": "text"
								},
								{
									"key": "email",
									"value": "Ahmedl3swy143@outlook.com",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "maryram",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/XPRISTO/Pictures/Me.jpg"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{URL}}/teachers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteTeacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.expect(pm.response.code).to.equal(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'message'\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'message' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 24\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/teachers/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllSuperviors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.supervisors).to.exist.and.to.be.an('array');",
									"    ",
									"    responseData.supervisors.forEach(function(supervisor) {",
									"        pm.expect(supervisor.email).to.be.a('string').and.to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);",
									"    });",
									"});",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.supervisors).to.exist;",
									"",
									"    responseData.supervisors.forEach(function(supervisor) {",
									"        pm.expect(supervisor.password).to.exist.and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Image is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.supervisors).to.be.an('array');",
									"  ",
									"  responseData.supervisors.forEach(function(supervisor) {",
									"    pm.expect(supervisor.image).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Image should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullname\": \"Ahmed\",\r\n    \"email\": \"Ahmedl3swy1@outlook.com\",\r\n    \"password\": \"$2b$10$bCjVaCuEhPlHCvdxICbl9.8hj/qM2sUhGPE0CQ1fkdjggWS2Sq6SS\",\r\n    \"image\": \"Me2.jpg\",\r\n    \"_id\": \"65db7c6a78198808e7fef205\",\r\n    \"id\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/teachers/supervisors",
							"host": [
								"{{URL}}"
							],
							"path": [
								"teachers",
								"supervisors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ChildRoute",
			"item": [
				{
					"name": "getAllChildern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Fullname is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(child) {",
									"    pm.expect(child.fullname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Fullname should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Address has the required fields - city, street, and building\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(child) {",
									"        pm.expect(child.address).to.exist.and.to.be.an('object');",
									"        pm.expect(child.address.city).to.exist.and.to.be.a('string');",
									"        pm.expect(child.address.street).to.exist.and.to.be.a('string');",
									"        pm.expect(child.address.building).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"City is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(child){",
									"        pm.expect(child.address.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/child",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "getChildByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData._id).to.exist;",
									"    pm.expect(responseData.fullname).to.exist;",
									"    pm.expect(responseData.address).to.exist;",
									"    pm.expect(responseData.age).to.exist;",
									"    pm.expect(responseData.level).to.exist;",
									"    pm.expect(responseData.__v).to.exist;",
									"    pm.expect(responseData.image).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Address has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.address).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.address.city).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.address.street).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.address.building).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Age is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.age).to.be.a('number');",
									"    pm.expect(responseData.age).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Fullname is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.fullname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/child/5",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateChild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullname\": \"string\",\r\n  \"address\": {\r\n    \"city\": \"string\",\r\n    \"street\": \"string\",\r\n    \"building\": 0\r\n  },\r\n  \"age\": 0,\r\n  \"level\": \"PreKG\",\r\n  \"id\":10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/child",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteChild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'message'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The message field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the Content-Type header is 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/child",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "addNewChild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Address has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.address).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.address.city).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.address.street).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.address.building).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Age is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.age).to.exist.and.to.be.a('number').and.to.satisfy((age) => age >= 0, \"Age should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Check _id is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fullname",
									"value": "Ahmed",
									"type": "text"
								},
								{
									"key": "age",
									"value": "13",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/XPRISTO/Pictures/Me.jpg"
								},
								{
									"key": "level",
									"value": "PreKG",
									"type": "text"
								},
								{
									"key": "city",
									"value": "city",
									"type": "text"
								},
								{
									"key": "street",
									"value": "street",
									"type": "text"
								},
								{
									"key": "building",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/child",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateChild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "fullname",
									"value": "Ahmed",
									"type": "text"
								},
								{
									"key": "age",
									"value": "13",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/XPRISTO/Pictures/Me.jpg"
								},
								{
									"key": "level",
									"value": "PreKG",
									"type": "text"
								},
								{
									"key": "city",
									"value": "city",
									"type": "text"
								},
								{
									"key": "street",
									"value": "street",
									"type": "text"
								},
								{
									"key": "building",
									"value": "1",
									"type": "text"
								},
								{
									"key": "id",
									"value": "5",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/child",
							"host": [
								"{{URL}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "classRoute",
			"item": [
				{
					"name": "getAllClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.name).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'supervisor' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.supervisor).to.be.a('number');",
									"        pm.expect(item.supervisor).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence and length of the 'children' array\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('children');",
									"    pm.expect(responseData.children).to.be.an('array');",
									"    pm.expect(responseData.children).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/class",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "getClassByID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/class/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "addNewClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist;",
									"  pm.expect(responseData.supervisor).to.exist;",
									"  pm.expect(responseData.children).to.exist;",
									"  pm.expect(responseData._id).to.exist;",
									"  pm.expect(responseData.__v).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Supervisor is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.supervisor).to.be.a('number');",
									"  pm.expect(responseData.supervisor).to.be.at.least(0, \"Supervisor should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Children is an array of non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.children).to.be.an('array');",
									"    responseData.children.forEach(function(child){",
									"        pm.expect(child).to.be.a('number');",
									"        pm.expect(child).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"maryam\",\r\n        \"supervisor\": \"m\",\r\n        \"children\": [1,2,3,4]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/class",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the value of the 'message' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is in an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\":2,\r\n        \"name\": \"maryam\",\r\n        \"supervisor\": \"m\",\r\n        \"children\": [1,2,3,4]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/class",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteClass",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/class",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "getClassChildren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the fullname is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.fullname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the level is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').with.lengthOf(1);",
									"  ",
									"  responseData.forEach(function (child) {",
									"    pm.expect(child.level).to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/class/child/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class",
								"child",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "getClassSupervisors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys(",
									"        '_id',",
									"        'fullname',",
									"        'email',",
									"        'password',",
									"        'image',",
									"        '__v'",
									"    );",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.password).to.exist.and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the '__v' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.__v).to.exist.and.to.be.a('number').and.to.satisfy((v) => v >= 0, \"'__v' should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/class/teacher/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"class",
								"teacher",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('jwt', pm.response.json().token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"email\": \"admin@admin.com\",\r\n        \"password\": \"admin\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}